<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiang849725768.github.io</id>
    <title>jsk的个人空间</title>
    <updated>2021-06-08T06:56:01.988Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiang849725768.github.io"/>
    <link rel="self" href="https://jiang849725768.github.io/atom.xml"/>
    <subtitle>记录一些杂思</subtitle>
    <logo>https://jiang849725768.github.io/images/avatar.png</logo>
    <icon>https://jiang849725768.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, jsk的个人空间</rights>
    <entry>
        <title type="html"><![CDATA[win10常用软件记录]]></title>
        <id>https://jiang849725768.github.io/post/win10常用软件记录/</id>
        <link href="https://jiang849725768.github.io/post/win10常用软件记录/">
        </link>
        <updated>2021-06-07T08:38:36.000Z</updated>
        <content type="html"><![CDATA[<p><ul class="markdownIt-TOC">
<li><a href="#win10%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95">win10常用软件记录</a>
<ul>
<li><a href="#%E6%96%87%E4%BB%B6%E8%BD%AF%E4%BB%B6%E7%AE%A1%E7%90%86">文件/软件管理</a>
<ul>
<li><a href="#listary">Listary</a></li>
<li><a href="#7-zip">7-zip</a></li>
<li><a href="#space-sniffer">Space Sniffer</a></li>
<li><a href="#xyplorer">XYplorer</a></li>
<li><a href="#free-download-manager">Free Download Manager</a></li>
<li><a href="#geek">Geek</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91">文本/代码编辑</a>
<ul>
<li><a href="#anaconda3">Anaconda3</a></li>
<li><a href="#sumatrapdf">SumatraPDF</a></li>
<li><a href="#pdf-xchange-pro">PDF-XChange PRO</a></li>
<li><a href="#vs-code">VS Code</a></li>
<li><a href="#gridea">Gridea</a></li>
<li><a href="#typora">Typora</a></li>
<li><a href="#picgo">PicGo</a></li>
<li><a href="#xtranslator">Xtranslator</a></li>
</ul>
</li>
<li><a href="#%E6%B8%B8%E6%88%8F">游戏</a>
<ul>
<li><a href="#%E5%A5%87%E5%A6%99%E5%8A%A0%E9%80%9F%E5%99%A8">奇妙加速器</a></li>
<li><a href="#directx-repair">DirectX Repair</a></li>
</ul>
</li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E7%BE%8E%E5%8C%96">系统美化</a>
<ul>
<li><a href="#translucenttb">TranslucentTB</a></li>
<li><a href="#smarttaskbar%E6%99%BA%E8%83%BD%E4%BB%BB%E5%8A%A1%E6%A0%8F">SmartTaskbar/智能任务栏</a></li>
<li><a href="#traffic-monitor">Traffic Monitor</a></li>
</ul>
</li>
<li><a href="#%E5%85%B6%E4%BB%96%E5%B7%A5%E5%85%B7">其他工具</a>
<ul>
<li><a href="#apowersoft">Apowersoft</a></li>
<li><a href="#potplayer">PotPlayer</a></li>
<li><a href="#stickies">Stickies</a></li>
<li><a href="#wgestures">WGestures</a></li>
<li><a href="#snipaste">Snipaste</a></li>
<li><a href="#%E7%81%AB%E7%BB%92">火绒</a></li>
<li><a href="#%E5%90%91%E6%97%A5%E8%91%B5">向日葵</a></li>
<li><a href="#%E5%82%B2%E6%A2%85%E5%88%86%E5%8C%BA%E5%8A%A9%E6%89%8B">（傲梅）分区助手</a></li>
<li><a href="#%E6%A0%BC%E5%BC%8F%E5%B7%A5%E5%8E%82">格式工厂</a></li>
<li><a href="#islide-tools">Islide Tools</a></li>
<li><a href="#v2rayn">v2rayN</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<p>时隔一年又重新捡起了博客，这次换用了国人开发的Gridea，新开始的第一篇博客打算对平时常用的众多高效windows软件进行一个记录。</p>
<h1 id="win10常用软件记录">win10常用软件记录</h1>
<h2 id="文件软件管理">文件/软件管理</h2>
<h3 id="listary">Listary</h3>
<p><a href="https://www.listary.com/">官网(5)</a> <a href="https://www.listary.com/beta">Listary 6</a></p>
<p>文件快速查找，6比5美观一些，但实际上为测试版，正式版遥遥无期，估计是没有了</p>
<h3 id="7-zip">7-zip</h3>
<p><a href="https://www.7-zip.org/">官网</a></p>
<p>解压缩软件，相对来说小巧无广告，直接加进右键菜单，很方便</p>
<h3 id="space-sniffer">Space Sniffer</h3>
<p><a href="https://www.azofreeware.com/2009/05/spacesniffer-1040.html">非官方中文版</a></p>
<p>磁盘空间检测，主要用来看看磁盘里有哪些东西，分别占多大位置，方便清磁盘空间</p>
<h3 id="xyplorer">XYplorer</h3>
<p><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=1414007&amp;highlight=xyplorer">破解版</a></p>
<p>文件管理器，相比win自带的功能不知道好到哪里去了，不过是付费软件，而且对于Onedrive兼容不大行，没法显示OneDrive文件状态</p>
<h3 id="free-download-manager">Free Download Manager</h3>
<p><a href="https://www.freedownloadmanager.org/zh/">官网</a></p>
<p>文件下载管理器，方便管理下载的文件，下载感觉比自带下载器快一点</p>
<h3 id="geek">Geek</h3>
<p><a href="https://geekuninstaller.com/download">官网</a></p>
<p>软件卸载器，集成各类软件的卸载，同时相比于win自带的功能，可以在软件卸载后检测其文件夹和注册表实现更彻底的删除</p>
<h2 id="文本代码编辑">文本/代码编辑</h2>
<h3 id="anaconda3">Anaconda3</h3>
<p><a href="https://www.anaconda.com/products/individual">Anaconda | Individual Edition</a></p>
<p>python环境管理，便于创建多个python版本环境</p>
<h3 id="sumatrapdf">SumatraPDF</h3>
<p><a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer">官网</a></p>
<p>轻量pdf阅读器，纯阅读，很轻量，不能编辑，甚至书签都不能加，但也让界面很清爽</p>
<h3 id="pdf-xchange-pro">PDF-XChange PRO</h3>
<p>强大的pdf编辑器，也是付费软件，使用的是吾爱破解的破解版能够对pdf中的文字，图片等进行更改</p>
<h3 id="vs-code">VS Code</h3>
<p><a href="https://code.visualstudio.com/Download">Download Visual Studio Code</a></p>
<p>文本编辑器，主要用来进行python编程，同时可以用作txt等众多文本文件的编辑器，有众多的插件提升使用体验</p>
<p>**PS：**下载System Installer版</p>
<h3 id="gridea">Gridea</h3>
<p><a href="https://gridea.dev/#started">官网</a></p>
<p>博客软件，短暂使用个人感觉是相比hexo和hugo方便许多，基本都是图形化交互界面</p>
<h3 id="typora">Typora</h3>
<p><a href="https://typora.io/">官网</a></p>
<p>markdown编辑器，非常好用，虽然vscode也提供markdown编辑，但不如typora界面简洁方便，现在这篇博文就是使用typora完成</p>
<h3 id="picgo">PicGo</h3>
<p><a href="https://github.com/Molunerfinn/PicGo">github</a></p>
<p>markdown图片同步，搭配typora实现本地图片实时上传，建议使用githubplus插件</p>
<h3 id="xtranslator">Xtranslator</h3>
<p><a href="https://www.zhiyunwenxian.cn/">官网</a></p>
<p>英文文献阅读翻译助手，很方便，对于我这种英语能力差又需要阅读英文文献的非常有用。需要通过公众号登陆，以及解锁高级功能，但总体来说是免费软件</p>
<h2 id="游戏">游戏</h2>
<h3 id="奇妙加速器">奇妙加速器</h3>
<p><a href="https://www.qimiao.com/">官网</a></p>
<p>免费游戏加速插件，用来和朋友steam联机，以及一些需要连接云端的epic游戏</p>
<h3 id="directx-repair">DirectX Repair</h3>
<p>win10游戏插件修复工具，基本显示游戏缺了什么文件都可以用这个修复</p>
<h2 id="系统美化">系统美化</h2>
<h3 id="translucenttb">TranslucentTB</h3>
<p><a href="https://www.microsoft.com/zh-cn/p/translucenttb/9pf4kz2vn4w9?rtc=1&amp;activetab=pivot:overviewtab">微软商店</a></p>
<p>任务栏透明化or毛玻璃化</p>
<h3 id="smarttaskbar智能任务栏">SmartTaskbar/智能任务栏</h3>
<p><a href="https://www.microsoft.com/zh-cn/p/smarttaskbar/9pjm69mps6t9?activetab=pivot%3aoverviewtab#">微软商店</a></p>
<p>控制任务栏在应用最大化时自动隐藏</p>
<h3 id="traffic-monitor">Traffic Monitor</h3>
<p><a href="https://github.com/zhongyang219/TrafficMonitor">GitHub</a></p>
<p>任务栏插件，可以显示当前网速、CPU及内存利用率，支持嵌入到任务栏显示，支持更换皮肤、历史流量统计等功能</p>
<h2 id="其他工具">其他工具</h2>
<h3 id="apowersoft">Apowersoft</h3>
<p><a href="https://www.apowersoft.cn/free-online-screen-recorder">官网</a></p>
<p>录屏软件，主要算个插件，通过网页打开，免费好用，提供剪辑和保存为gif功能</p>
<h3 id="potplayer">PotPlayer</h3>
<p><a href="https://potplayer.org/">疑似官网</a></p>
<p>视频播放软件，支持加速加字幕等功能</p>
<h3 id="stickies">Stickies</h3>
<p><a href="https://www.zhornsoftware.co.uk/stickies/download.html">官网</a></p>
<p>便签，算是找到的最符合需求的便签，自启动，通过OneDrive同步，微软自带的便签同步总出问题，算是个替代品</p>
<h3 id="wgestures">WGestures</h3>
<p><a href="https://www.yingdev.com/projects/wgestures">官网</a></p>
<p>鼠标手势控制，通过鼠标手势以及一些边角点触发特定操作，定制功能很多，懒得整，主要还是在用一些基础的功能</p>
<h3 id="snipaste">Snipaste</h3>
<p><a href="https://zh.snipaste.com/download.html">官网</a></p>
<p>截图软件，可以实时编辑截图，最好用的功能是可以将截图贴在桌面并置顶。</p>
<h3 id="火绒">火绒</h3>
<p><a href="https://www.huorong.cn/">官网</a></p>
<p>安全工具，其实win自带工具完全够用，用火绒主要是用一些安全软件带的诸如网络诊断等附加功能，而相比369等软件来说火绒又异常良心。</p>
<h3 id="向日葵">向日葵</h3>
<p><a href="https://sunlogin.oray.com/download/">官网</a></p>
<p>电脑远程同步软件，在实验室实现多个系统之间相互联系用，相比同类软件team viewer，不付费时支持的连接设备更多。</p>
<h3 id="傲梅分区助手">（傲梅）分区助手</h3>
<p><a href="https://www.disktool.cn/download.html">官网</a></p>
<p>电脑磁盘分区管理，实现分区拆分合并格式化等各种功能</p>
<h3 id="格式工厂">格式工厂</h3>
<p><a href="http://www.pcgeshi.com/">官网</a></p>
<p>音视频格式转换器，用的时候会对视频有一定压缩，一般不太影响清晰度。</p>
<h3 id="islide-tools">Islide Tools</h3>
<p><a href="https://www.islide.cc/">官网</a></p>
<p>ppt编辑辅助插件，更方便地制作ppt</p>
<h3 id="v2rayn">v2rayN</h3>
<p>懂自懂</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[初识爬虫]]></title>
        <id>https://jiang849725768.github.io/post/初识爬虫/</id>
        <link href="https://jiang849725768.github.io/post/初识爬虫/">
        </link>
        <updated>2020-03-10T00:54:30.000Z</updated>
        <content type="html"><![CDATA[<p>初学python爬虫，尝试爬取指定的百度图片，主要使用requests库以及正则表达式搜索</p>
<hr>
<p>先在目录下创建一个专门的文件夹，用于存放下载的图片</p>
<pre><code class="language-python">os.makedirs('./img/', exist_ok=True)
</code></pre>
<p>读取网址html文档并找出其中的图片链接，因为很喜欢广末凉子，这里的URL用的是广末凉子的百度图片搜索结果</p>
<pre><code class="language-python">URL = 'http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=%E5%B9%BF%E6%9C%AB%E5%87%89%E5%AD%90'
html = requests.get(URL).text
</code></pre>
<p>通过正则表达式找出图片链接，即<code>objURL</code>后的连接，<code>re.S</code>代表正则表达式中的<code>.</code>可以用来表示<code>\n</code></p>
<pre><code class="language-python">pics_url = re.findall('&quot;objURL&quot;:&quot;(.*?)&quot;', html, re.S)
</code></pre>
<p>下载是通过<code>request.get</code>读取图片链接，通过在文件夹下创立新的jpg文件并写入读取到的内容的方式来实现图片的下载，当图片超出指定下载数时停止爬取</p>
<pre><code class="language-python">for pic_url in pics_url:
    print(f&quot;正在下载第{num+1}张图:{pic_url}&quot;)
    try:
        if pic_url:
            pic = requests.get(pic_url, timeout=7)
        else:
            continue
    except BaseException:
        print(&quot;下载失败&quot;)
        num += 1
        continue
    else:
        picture = open(f&quot;./img/{num+1}.jpg&quot;,'wb')
        picture.write(pic.content)
        picture.close()
        num += 1
    finally:
        if num &gt;= Max_num:
            break
</code></pre>
<p>整体代码如下所示</p>
<pre><code class="language-python">import os
import re
import requests
#from bs4 import BeautifulSoup

num = 0
Max_num = 100

os.makedirs('./img/', exist_ok=True)

URL = 'http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=%E5%B9%BF%E6%9C%AB%E5%87%89%E5%AD%90'
html = requests.get(URL).text

pics_url = re.findall('&quot;objURL&quot;:&quot;(.*?)&quot;', html, re.S)

for pic_url in pics_url:
    print(f&quot;正在下载第{num+1}张图:{pic_url}&quot;)
    try:
        if pic_url:
            pic = requests.get(pic_url, timeout=7)
        else:
            continue
    except BaseException:
        print(&quot;下载失败&quot;)
        num += 1
        continue
    else:
        picture = open(f&quot;./img/{num+1}.jpg&quot;,'wb')
        picture.write(pic.content)
        picture.close()
        num += 1
    finally:
        if num &gt;= Max_num:
            break
            
print('下载结束')

</code></pre>
<p>运行之后发现下载的图片只有60张，而不是指定的100张</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/jiang849725768/PrivateImgHost/img/20200310164910.png" alt="结果图片" loading="lazy"></figure>
<p>通过查询发现百度图片应该是一页只有60张图，若继续爬取应改动网址中的pn值</p>
<p>如<code>http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=%E5%B9%BF%E6%9C%AB%E5%87%89%E5%AD%90&amp;pn=1</code>，<code>http://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=%E5%B9%BF%E6%9C%AB%E5%87%89%E5%AD%90&amp;pn=2</code></p>
<p>参考的是CSDN上的这篇文章</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_40774175/article/details/81273198">Python 爬虫系列教程一爬取批量百度图片</a></p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Effective Python]]></title>
        <id>https://jiang849725768.github.io/post/Effective Python/</id>
        <link href="https://jiang849725768.github.io/post/Effective Python/">
        </link>
        <updated>2020-02-12T00:29:26.000Z</updated>
        <content type="html"><![CDATA[<p>主要记录阅读《Effective Python》一书中发现的对于现阶段我编写代码有帮助的内容。</p>
<h2 id="主要目标">主要目标</h2>
<p>以 <em>Pythontic</em> 方式来编写程序。</p>
<h2 id="第一章">第一章</h2>
<h3 id="遵循pep8风格指南">遵循PEP8风格指南</h3>
<h4 id="空白">空白</h4>
<ul>
<li>
<p>使用空格而不是制表符来表示缩进</p>
</li>
<li>
<p>每行字符数不超过79</p>
</li>
<li>
<p>多行的长表达式在换行时应多加一层缩进</p>
</li>
<li>
<p>文件中的函数与类用两个空行隔开</p>
</li>
<li>
<p>同一个类中各方法用一个空行隔开</p>
</li>
</ul>
<h4 id="命名">命名</h4>
<ul>
<li>函数、变量、属性：小写字母，单词间下划线连接 ==&gt; <code>lowercase_underscore</code></li>
<li>类与异常：每个单词首字母均大写  ==&gt; <code>CapitalizedWord</code></li>
<li>模块级别的常量应全部采用大写字母拼写 ==&gt; <code>ALL_CAPS</code></li>
<li>类的实例方法的首个参数命名为<code>self</code>，表示该对象自身类方法的首个参数命名为<code>chs</code>，表示该类自身</li>
</ul>
<p>####　表达式和语句</p>
<ul>
<li>采用内联形式的否定词，<code>if a is not b</code>  √  <code>if not a is b</code>  ×</li>
<li>不通过检测长度的办法（<code>if len(somelist) == 0</code>）判断<code>somelist</code>是否为空，采用<code>if not somelist</code>，<code>if somelist</code>判断</li>
<li>不编写单行的if语句、for循环、while循环及except复合语句</li>
<li>始终将import语句放在文件开头</li>
<li>总是使用绝对名称引用模块，<code>from bar import boo</code>  √  <code>import boo</code>  ×</li>
<li>按顺序将import语句分为三个部分：标准库模块，第三方模块，自用模块，每个部分各语句按模块字母排序</li>
</ul>
<h3 id="用辅助函数替代复杂表达式">用辅助函数替代复杂表达式</h3>
<p>代码清晰程度：if/else表达式 &gt; Boolean操作符（or，and)</p>
<p>使用辅助函数代替复杂的表达式</p>
<h3 id="切割序列">切割序列</h3>
<p><code>somlist[-0:]</code>为原列表的一份拷贝</p>
<p>单次切片操作内不要同时指定start、end和stride <code>[start:end:stride​]</code></p>
<h3 id="列表推导">列表推导</h3>
<h4 id="用列表推导取代map和filter">用列表推导取代map和filter</h4>
<pre><code class="language-python">a = [1,2,3,4,5,6,7,8,9,10]

# 计算平方值
# map
squares = map(lambda x: x**2, a)
# list comprehension(列表推导)
squares = [x**2 for x in a]

# 计算偶数平方值
# map, filter
alt = map(lambda x: x**2, filter(lambda x: x % 2 == 0, a))
# list comprehension
even_squares = [x**2 for x in a if x % 2 == 0]
even_squares == list(alt)
</code></pre>
<h4 id="不使用含两个以上表达式的列表推导">不使用含两个以上表达式的列表推导</h4>
<pre><code class="language-python">my_list = [
    [[1,2,3], [4,5,6]],
    # ...
]
# 多表达式
flat = [x for sublist1 in my_lists
        for sublist2 in sublist1
        for x in sublist2]
# for循环
flat = []
for sublist1 in my_lists:
    for sublist2 in my_lists:
        flat.extend(sublist2)
</code></pre>
<h3 id="用生成器表达式改写数据量较大的列表推导">用生成器表达式改写数据量较大的列表推导</h3>
<p>生成器可减少内存消耗，防止因处理大数据量消耗内存造成的程序崩溃</p>
<p>将列表推导的<code>[]</code>改为<code>()</code>即可构成生成器表达式</p>
<p>生成器表达式可相互组合</p>
<pre><code class="language-python"># 列表推导
value = [len(x) for x in open('my_file.txt')]
# 生成器--&gt;使用()包含表达式
it = (len(x) for x in open('my_file.txt'))
# 生成器组合
roots = ((x, x**0.5) for x in it)
</code></pre>
<h3 id="用-enumerate-代替-range">用 enumerate 代替 range</h3>
<p>enumerate 可指定开始下标：</p>
<pre><code class="language-python">for i,value in enumerate(somelist,1)
# i 从1开始
</code></pre>
<h3 id="用-zip-同时遍历两个迭代器">用 zip 同时遍历两个迭代器</h3>
<p>zip 可将两个或两个以上的迭代器封装为生成器</p>
<p><strong>注意事项</strong>：如果输入的迭代器长度不同，zip会在其中一个耗尽时停止，此时可采用<code>zip_longest</code>函数替代</p>
<h2 id="第二章">第二章</h2>
<h3 id="用异常来表示特殊情况而不是none">用异常来表示特殊情况，而不是None</h3>
<p>在作为判断条件时，None、0或者空字符串等都会视为False，所以在特殊情况下抛出异常而非返回None值</p>
<h3 id="使用nonlocal以在闭包里使用外围作用域中变量">使用nonlocal以在闭包里使用外围作用域中变量</h3>
<p>在表达式中引用变量时，python解释器按如下顺序遍历所有域：</p>
<ol>
<li>当前函数的作用域</li>
<li>任何外围作用域（例如包含当前函数的其他函数）</li>
<li>包含当前代码的模块的 作用域（也叫全局作用域）</li>
<li>内置作用域</li>
</ol>
<p>给变量赋值时，如果当前作用域中无此变量，python将此次赋值视为对该变量的定义，新变量作用域即为当前作用域。</p>
<p>在函数中可使用<code>nonlocal</code>表明应在上层作用域中查找该变量。</p>
<p><strong>限制</strong>：<code>nonlocal</code>不能延伸到模块级别。</p>
<pre><code class="language-python">def func_fir(a,b):
    x = True
    def func_sec(y):
        nonlocal x
        return x
</code></pre>
<p>尽量在简单函数内使用<code>nonlocal</code>，当代码复杂时，应将相关状态封装为辅助类。</p>
<h3 id="用生成器改写直接返回列表的函数">用生成器改写直接返回列表的函数</h3>
<p><code>yield</code></p>
<h3 id="迭代注意事项">迭代注意事项</h3>
<ul>
<li>
<p>迭代器只能产生一轮结果，重复迭代无输出但常常不会报错</p>
</li>
<li>
<p>将迭代器传给<code>iter</code>函数，会返回该迭代器，将容器类型对象传给<code>iter</code>函数，每次都会返回一个新的迭代器对象，可用此特性来判别迭代器</p>
</li>
<li>
<p>把<code>__iter__</code>方法实现为生成器即可定义自己的容器类型。</p>
</li>
</ul>
<h3 id="函数参数优化">函数参数优化</h3>
<h4 id="数量可变的位置参数">数量可变的位置参数</h4>
<p>在最后的位置参数前加<code>*</code>以代表任意数量的位置参数</p>
<pre><code class="language-python">def func_one(a, *b):
    return a + sum(b)

#enable
func_one(1)
func_one(1, 2)
func_one(1, 2, 3)
</code></pre>
<p>传入已有列表时在列表前加上<code>*</code> :</p>
<pre><code class="language-python">list_one = [2, 3, 4]
func_one(1, *list)
</code></pre>
<p><strong>注意事项</strong>：</p>
<ul>
<li>变长参数在传给函数时会先转化为元组，传入生成器可能消耗大量内存导致程序崩溃。</li>
<li>在以后为函数添加新的位置参数时，应该使用只能以关键字形式指定的参数来扩展。</li>
</ul>
<h4 id="用none和文档字符串来描述具有动态默认值的参数">用None和文档字符串来描述具有动态默认值的参数</h4>
<p>函数参数的默认值，会在每个模块加载进来时求出，在Python中实现动态默认值的正确做法是把参数默认值设为<code>None</code>，并在文档字符串中将<code>None</code>所对应的实际行为描述出来，编写函数代码时，若该参数值为<code>None</code>，就将其设为实际的默认值</p>
<h3 id="使用只能以关键字形式指定的参数">使用只能以关键字形式指定的参数</h3>
<p>在参数列表中加入<code>*</code>号，标志位置参数在此终结，之后的参数只能以关键字形式指定。</p>
<pre><code class="language-python">def func(a, b, *, x=True, y=False):
    pass

# TypeError
func(1, 2, True, False)

# Enable
func(1, 2)
func(1, 2, x=True)
</code></pre>
<h2 id="第三章">第三章</h2>
<h3 id="尽量用辅助类维护程序的状态">尽量用辅助类维护程序的状态</h3>
<p>避免使用多层嵌套，不要使用包含其他字典的字典</p>
<p>在保存内部数据的字典变得复杂时，应将这些代码拆解为多个辅助类</p>
<h3 id="简单的接口应接受函数而非类的实例">简单的接口应接受函数而非类的实例</h3>
<p><em>未理解此条意思，感觉此条实际上一步步展示如何更好地调用类的实例作为hook函数</em></p>
<p>在类中使用<code>__call__</code>的特殊方法，可使类的实例能够像普通的python函数一样得以调用</p>
]]></content>
    </entry>
</feed>